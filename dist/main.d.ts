// Generated by dts-bundle-generator v9.5.1

import { BoxProps, TextProps } from 'ink';
import React$1 from 'react';

export type BorderData = {
	center: string;
	color?: TextProps["color"];
	dimColor?: boolean;
	end?: string;
	isVisible: boolean;
	start?: string;
};
export type BorderProps = BorderData;
export declare const BorderUi: React$1.FC<BorderProps>;
export type TopBorderFragment = {
	isTitle: boolean;
	content: string;
};
export type TopBorder = Pick<BorderData, "color" | "dimColor" | "isVisible"> & {
	fragments: Array<TopBorderFragment>;
	titleStyles?: TitleStyles;
};
export type Size = {
	width: number;
	height: number;
};
export type BorderStyle = "arrow" | "bold" | "classic" | "double" | "doubleSingle" | "round" | "single" | "singleDouble";
export type BorderCharacterPosition = "topLeft" | "topCenter" | "topRight" | "rightCenter" | "bottomRight" | "bottomCenter" | "bottomLeft" | "leftCenter";
export type BorderCharacters = Record<BorderCharacterPosition, string>;
export type TitleJustify = NonNullable<BoxProps["justifyContent"]>;
export type Widths = {
	border: number;
	title: number;
};
export declare const borderCharacters: Record<BorderStyle, BorderCharacters>;
export type BorderPosition = "bottom" | "left" | "right" | "top";
export type Borders = Record<BorderPosition, BorderData>;
export type CrossAxisBorderVisibilities = [
	start: boolean,
	end: boolean
];
export type TitleStyles = {
	start: string;
	end: string;
};
export type TitledBoxOptions = Omit<TitledBoxData, "titleJustify" | "topBorderData"> & Partial<Pick<TitledBoxData, "titleJustify">>;
export type TitledBoxData = {
	size: Size;
	style: BorderStyle;
	titles: Array<string>;
	titleJustify: TitleJustify;
	titleStyles?: TitleStyles;
	borders: Borders;
	topBorderData: TopBorder;
};
export declare class TitledBoxApi implements TitledBoxData {
	#private;
	/** The characters used to build borders borders. */
	static characters: Record<BorderStyle, BorderCharacters>;
	/** The left and right padding of the title. */
	static TITLE_PADDING: number;
	/** Top-left and Top-right characters. */
	static TOP_CORNER_LENGTH: number;
	/** The gap between titles. */
	static TITLE_GAP: number;
	style: BorderStyle;
	size: Size;
	titles: Array<string>;
	titleJustify: TitleJustify;
	titleStyles?: TitleStyles;
	constructor(options: TitledBoxOptions);
	/** The borders of the four sides of the box. */
	get borders(): Borders;
	/** The number of visible titles. */
	get visibleTitleCount(): number;
	/** The titles that are visible. Titles that overflow are hidden. */
	get visibleTitles(): Array<string>;
	get characters(): BorderCharacters;
	/**
	 * The border uses if a border can not be created. One of the causes of this
	 * is the border having insufficient length.
	 */
	get emptyBorder(): BorderData;
	get bottomBorder(): BorderData;
	get leftBorder(): BorderData;
	get rightBorder(): BorderData;
	get topBorder(): BorderData;
	/** The data for the top border. */
	get topBorderData(): TopBorder;
	/**
	 * The positions of the titles. The positions are calculated according the
	 * `titleJustify` prop. The positions take title padding into account.
	 */
	get titlePositions(): Array<number>;
	/** The total length of visible padded titles. */
	get totalTitleLength(): number;
	/** Title positions for `titleJustify="flex-start"`. */
	get startTitlePositions(): Array<number>;
	/** Title positions for `titleJustify="flex-end"`. */
	get endTitlePositions(): Array<number>;
	/** Title positions for `titleJustify="space-between"`. */
	get spaceBetweenTitlePositions(): Array<number>;
	/** Title positions for `titleJustify="space-around"`. */
	get spaceAroundTitlePositions(): Array<number>;
	/** Title positions for `titleJustify="space-evenly"`. */
	get spaceEvenlyTitlePositions(): Array<number>;
	/**
	 * Calculates positions for layout with equal spaces between titles and on the
	 * edges.
	 *
	 * @param spaceCountAdjustment An increment or decrement in the number of
	 * spaces.
	 * @param [startWidthSpace=false] Whether or not to start with a space.
	 */
	getEvenlySpacedTitlePositions(spaceCountAdjustment: -1 | 1, startWidthSpace?: boolean): Array<number>;
	/** Title positions for `titleJustify="center"`. */
	get centerTitlePositions(): Array<number>;
	/** Creates a vertical border. */
	getVerticalBorder(character: string): string;
	/** Creates a JSON object containing `TitledBoxData`. */
	toJSON(): TitledBoxData;
}
export type TitledBoxProps = Omit<BoxProps, "borderStyle" | "children"> & {
	titles: Array<string>;
	titleJustify?: TitleJustify;
	titleStyles?: TitleStyles;
	borderStyle: BorderStyle;
	children: React$1.ReactNode;
};
export declare const TitledBox: React$1.FC<TitledBoxProps>;

export {};
